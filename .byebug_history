c
path
c
response['metadata']
response
c
response
response['data']
response
repsonse
repsose
c
client.uptime_checks(params)
response
 [200, {'Content-Type': 'application/json'}, JSON.dump(response)]
c
env.params
c
request_headers
env.request_headers
c
 client.uptime_checks(params)
c
client.uptime_checks(params)
c
faraday.builder
c
faraday.builder.adapter.nil?
faraday.builder
c
faraday.builder.adapter
faraday.builder.adapter.include?(test)
faraday.builder.adapter
faraday.builder
c
exit
Faraday.default_adapter
faraday.builder
block_given?
faraday
faraday.builder.handlers
c
@conn.get "/uptime"
@conn
path = "/uptime"
    end
      yield(req) if block_given?
      req.headers[:Authorization] = "Bearer " + @options[:API_KEY]
      end
        raise 'must not happen'
      else
        req.body = params
      when :post, :put
        req.params = params
      when :get, :delete
      case method
      req.url path
response = @conn.send(method) do |req|
path
c
client.uptime_checks(params)
c
path = "/uptime"
path
c
stubs.verify_stubbed_calls
client.uptime_checks()
client.uptime_checks(params)
stubs
exit
c
stubs.verify_stubbed_calls
stubs
c
options
c
options
c
options
optinos
c
client.uptime_checks()
params
client.uptime_checks(params)
c
stubs
c
client.stub
client.stubs
client
c
@conn
path
c
response
c
params
stub
path
c
method
path
c
exit
params
c
respone =    request("#{ENDPOINT}/uptime/#{test_id}", :put, params)
respone
response
respone =    request("#{ENDPOINT}/uptime/#{test_id}", :put, params)
    request("#{ENDPOINT}/uptime/#{test_id}", :put, params)
/home/felix.eschey/Code/statuscake/lib/statuscake/client.rb    request("#{ENDPOINT}/uptime/#{test_id}", :put, params)
c
request("#{ENDPOINT}/uptime", :get, params)['data']
lass
[1,2,3] + [2,3]
[1,2,3] + [a,b]
res['dataâ€™]
res.class
@data.count
@data += res['data']
@data.count
data.count
@data += res['data']
res[:data]
@data.class
list-
h list
list
h
where
h
@data.class
@data.keys
res.keys
res
@data.class
@data
c
params
exit
params
c
exit
c
params = params.merge(test_type: 'HTTP', check_rate: 1800, regions: ['paris'])
params
c
params
exit
params
c
params
c
params
c
params
c
params
c
exit
params
method.inspect
method
request("#{ENDPOINT}/uptime", get, params)
request("#{ENDPOINT}/uptime", method, params)
method
params
method
params
"#{ENDPOINT}/uptime"
